{"version":3,"sources":["index.js","reportWebVitals.js"],"names":["timeoutID","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Timer","props","handelPause","clearInterval","audioBeep","status","audio","document","getElementById","play","loop","pause","handleBreakLength","e","state","BreakLength","_","currentTarget","id","setState","handleSesstionLength","sesstionLength","remainingTime","handelTimer","Date","now","countDownDate","getTime","setInterval","distance","hours","getHours","minutes","getMinutes","seconds","getSeconds","newremaining","handleBreak","timerLabel","console","log","newSession","handelReset","timeFormat","time","toString","padStart","className","this","reset","start","stop","changeBreakLength","changeSesstionLength","currentBreakLength","currentSesstionLength","preload","src","React","Component","Controls","onClick","Options","value","ReactDOM","render","StrictMode"],"mappings":"2KAKIA,E,4DCOWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,eDARQ,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAURC,YAAc,WACZC,cAAcb,IAZG,EAqBnBc,UAAY,SAACC,GACX,IAAIC,EAAQC,SAASC,eAAe,QACtB,SAAVH,GACFC,EAAMG,OACNH,EAAMI,MAAO,GAEbJ,EAAMK,SA3BS,EA0CnBC,kBAAoB,SAACC,GACnB,EAAKX,cACL,MAAyB,EAAKY,MAAxBC,EAAN,EAAMA,YAAN,EAAmBC,EAEO,mBAAtBH,EAAEI,cAAcC,IAA2BH,EAAc,EAC3DA,IAE6B,mBAAtBF,EAAEI,cAAcC,IACvBH,IAEF,EAAKI,SAAS,CACZJ,YAAaA,KArDE,EAkEnBK,qBAAuB,SAACP,GACtB,EAAKX,cACL,MAA2C,EAAKY,MAA1CO,EAAN,EAAMA,eAAgBC,EAAtB,EAAsBA,cAAtB,EAAqCN,EAEX,qBAAtBH,EAAEI,cAAcC,IAA6BG,EAAiB,EAChEA,IAE6B,qBAAtBR,EAAEI,cAAcC,IACvBG,IAEFC,EAAiC,IAAjBD,EAEhB,EAAKF,SAAS,CACZE,eAAgBA,EAChBC,cAAeA,KAhFA,EAoFnBC,YAAc,WACZ,MAA2B,EAAKT,MAA1BQ,EAAN,EAAMA,cAAN,EAAqBN,EAErBM,EAAgBE,KAAKC,MAAQH,EAE7B,IAAII,GADJJ,EAAgB,IAAIE,KAAKF,IACSK,UAIlCrC,EAAYsC,aAAY,WAEtB,IAAIH,GAAM,IAAID,MAAOG,UAGjBE,EAAW,IAAIL,KAAKE,EAAgBD,GAGpCK,EAAQD,EAASE,WACjBC,EAAUH,EAASI,aACnBC,EAAUL,EAASM,aACnBC,EAAwB,KAARN,EAAe,IAAiB,IAAVE,EAA4B,IAAVE,EACrC,IAAIV,KAAa,KAARM,EAAe,IAAiB,IAAVE,EAA4B,IAAVE,GAGxE,EAAKf,SAAS,CACZG,cAAec,IAGF,GAAXJ,GAAgBE,GAAW,GAC7B,EAAK9B,UAAU,SAEF,GAAX8B,IACF,EAAK9B,UAAU,QACf,EAAKiC,iBAGN,MAxHc,EA4HnBA,YAAc,WACZ,EAAKnC,cACL,MAAyB,EAAKY,MAAxBC,EAAN,EAAMA,YACFO,GADJ,EAAmBN,EACCQ,KAAKC,MAAuB,IAAdV,GAE9BW,GADJJ,EAAgB,IAAIE,KAAKF,IACSK,UAElCrC,EAAYsC,aAAY,WAGtB,IAAIH,GAAM,IAAID,MAAOG,UAGjBE,EAAW,IAAIL,KAAKE,EAAgBD,GAGpCK,EAAQD,EAASE,WACjBC,EAAUH,EAASI,aACnBC,EAAUL,EAASM,aACnBC,EAAwB,KAARN,EAAe,IAAiB,IAAVE,EAA4B,IAAVE,EAe5D,GAVA,EAAKf,SAAS,CACZmB,WAAY,cACZhB,cAAec,IAIF,GAAXJ,GAAgBE,GAAW,GAC7B,EAAK9B,UAAU,SAGF,GAAX8B,EAAc,CAEhB,EAAK9B,UAAU,QACf,EAAKF,cACL,MAA4B,EAAKY,MAA3BO,EAAN,EAAMA,eAAN,EAAsBL,EACtBuB,QAAQC,IAAI,SAASnB,GACrB,IAAIoB,EAA8B,IAAjBpB,EACjB,EAAKF,SAAS,CACZmB,WAAY,UACZjB,eAAgBA,EAChBC,cAAemB,IAEjBF,QAAQC,IAAI,QAAQnB,MAGrB,MA7Kc,EAwLnBqB,YAAc,WACZvC,cAAcb,GAEd,EAAK6B,SAAS,CACZmB,WAAY,UACZvB,YAAa,EACbM,eAAgB,GAChBC,cAAe,QA/LA,EAoMnBqB,WAAa,SAACC,GAQZ,OAFc,IAAIpB,KAAKoB,GAAMX,aAAaY,WAAWC,SAAS,EAAG,KAEhD,IADH,IAAItB,KAAKoB,GAAMT,aAAaU,WAAWC,SAAS,EAAG,MAzMjE,EAAKhC,MAAQ,CACXwB,WAAY,UACZvB,YAAa,EACbM,eAAgB,GAChBC,cAAe,MANA,E,0CA+MnB,WACE,OACE,sBAAKJ,GAAG,MAAR,UACE,sBAAK6B,UAAU,gBAAf,UACE,qBAAK7B,GAAG,cAAR,SAAuB8B,KAAKlC,MAAMwB,aAClC,qBAAKpB,GAAG,YAAR,SAAqB8B,KAAKL,WAAWK,KAAKlC,MAAMQ,oBAElD,cAAC,EAAD,CACE2B,MAAOD,KAAKN,YACZQ,MAAOF,KAAKzB,YACZ4B,KAAMH,KAAK9C,cAEb,cAAC,EAAD,CACEkD,kBAAmBJ,KAAKpC,kBACxByC,qBAAsBL,KAAK5B,qBAC3BkC,mBAAoBN,KAAKlC,MAAMC,YAC/BwC,sBAAuBP,KAAKlC,MAAMO,iBAEpC,uBACEH,GAAG,OACHsC,QAAQ,OAERC,IAAI,qH,GAtOMC,IAAMC,WA6OpBC,E,4JACJ,WACE,OACE,sBAAK1C,GAAG,WAAR,UACE,wBAAQ2C,QAASb,KAAK/C,MAAMiD,MAA5B,mBACA,wBAAQW,QAASb,KAAK/C,MAAMkD,KAA5B,kBACA,wBAAQU,QAASb,KAAK/C,MAAMgD,MAA5B,0B,GANeS,IAAMC,WAavBG,E,4JACJ,WACE,OACE,sBAAK5C,GAAG,UAAR,UACE,sBAAK6B,UAAU,iBAAf,UACE,qBAAK7B,GAAG,cAAR,0BACA,wBACE6B,UAAU,YACV7B,GAAG,kBACH2C,QAASb,KAAK/C,MAAMmD,kBACpBW,MAAM,IAJR,SAME,sBAAMhB,UAAU,iBAAhB,sBAGF,qBAAKA,UAAU,YAAY7B,GAAG,eAA9B,SACG8B,KAAK/C,MAAMqD,qBAEd,wBACEP,UAAU,YACV7B,GAAG,kBACH2C,QAASb,KAAK/C,MAAMmD,kBACpBW,MAAM,IAJR,SAME,sBAAMhB,UAAU,iBAAhB,yBAIJ,sBAAKA,UAAU,iBAAf,UACE,qBAAK7B,GAAG,gBAAR,4BACA,wBACE6B,UAAU,YACV7B,GAAG,oBACH2C,QAASb,KAAK/C,MAAMoD,qBACpBU,MAAM,IAJR,SAME,sBAAMhB,UAAU,iBAAhB,sBAEF,qBAAKA,UAAU,YAAY7B,GAAG,iBAA9B,SACG8B,KAAK/C,MAAMsD,wBAEd,wBACER,UAAU,YACV7B,GAAG,oBACH2C,QAASb,KAAK/C,MAAMoD,qBACpBU,MAAM,IAJR,SAME,sBAAMhB,UAAU,iBAAhB,gC,GA/CUW,IAAMC,WA0D5BK,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF3D,SAASC,eAAe,SAM1BjB,M","file":"static/js/main.c584c87d.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\nimport './App.sass';\n\nvar timeoutID;\n\nclass Timer extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      timerLabel: \"Session\",// indicate if a Session Or Break has begun!\n      BreakLength: 5,\n      sesstionLength: 25,\n      remainingTime: 1500000 //25 min = 1500000 Milliseconds\n\n    }\n  }\n\n  handelPause = () => {\n    clearInterval(timeoutID)\n  }\n\n  /**\n   * When a countdown reaches zero (NOTE: timer MUST reach 00:00),\n   ***a sound indicating that time is up should play.\n   *@param {string} status indicate if the audio shauld start playing or stop\n   * beep must stop playing  when the element with the id of reset is clicked. (audioBeep(\"stop\"))\n   * */\n  audioBeep = (status) => {\n    let audio = document.getElementById(\"beep\")\n    if (status == \"start\") {\n      audio.play()\n      audio.loop = true\n    } else {\n      audio.pause()\n    }\n\n\n  }\n\n  /**\n   *When I click the element with the id of break-decrement,\n   ****the value within id=\"break-length\" decrements by a value of 1,\n   ****and I can see the updated value.\n   *When I click the element with the id of break-increment,\n   ****the value within id=\"break-length\" increments by a value of 1,\n   ****and I can see the updated value.\n   **@param {object} e  used to access to the id of  the node on which current-event listener was attached.\n   **/\n  handleBreakLength = (e) => {\n    this.handelPause() // in case the count down is on and we adjust the BreakLength\n    let { BreakLength, _ } = this.state\n\n    if (e.currentTarget.id == \"break-decrement\" && BreakLength > 0) {\n      BreakLength--\n    }\n    else if (e.currentTarget.id == \"break-increment\") {\n      BreakLength++\n    }\n    this.setState({\n      BreakLength: BreakLength\n    })\n  }\n\n  /**\n   *When I click the element with the id of session-decrement,\n   ****the value within id=\"session-length\" decrements by a value of 1,\n   ****and I can see the updated value.\n   *When I click the element with the id of session-increment,\n   ****the value within id=\"session-length\" increments by a value of 1,\n   ****and I can see the updated value.\n  **@param {object} e  used to access to the id of  the node on which current-event listener was attached.\n **/\n  handleSesstionLength = (e) => {\n    this.handelPause()// in case the count down is on and we adjust the SesstionLength\n    let { sesstionLength, remainingTime, _ } = this.state\n\n    if (e.currentTarget.id == \"session-decrement\" && sesstionLength > 0) {\n      sesstionLength--\n    }\n    else if (e.currentTarget.id == \"session-increment\") {\n      sesstionLength++\n    }\n    remainingTime = sesstionLength * 60000 // Minutes to Milliseconds\n\n    this.setState({\n      sesstionLength: sesstionLength,\n      remainingTime: remainingTime\n    })\n  }\n\n  handelTimer = () => {\n    let { remainingTime, _ } = this.state\n    // Set the date we're counting down to\n    remainingTime = Date.now() + remainingTime//in ms\n    remainingTime = new Date(remainingTime)\n    let countDownDate = remainingTime.getTime()\n    // Update the count down every 1 second\n\n\n    timeoutID = setInterval(() => {\n      // Get today's date and time\n      let now = new Date().getTime()\n\n      // Find the distance between now and the count down date\n      let distance = new Date(countDownDate - now)\n\n      // Time calculations for  hours, minutes and seconds\n      let hours = distance.getHours()\n      let minutes = distance.getMinutes()\n      let seconds = distance.getSeconds()\n      let newremaining = (hours * 3600 * 1000 + minutes * 60000 + seconds * 1000)\n      let newremainingtime = new Date(hours * 3600 * 1000 + minutes * 60000 + seconds * 1000)\n\n      // console.log(\"distance\" + distance + \"--\" + hours + \":\" + minutes + \":\" + seconds + \"---\" + (minutes * 60000 + seconds * 1000) + \"----\" + newremainingtime.getMinutes() + \":\" + newremainingtime.getSeconds())\n      this.setState({\n        remainingTime: newremaining\n\n      })\n      if (minutes == 0 && seconds <= 3)\n        this.audioBeep(\"start\")\n      // If the count down is over, trigger break timer\n      if (seconds == 0) {\n        this.audioBeep(\"stop\")\n        this.handleBreak()\n      }\n\n    }, 1000)\n\n  }\n\n  handleBreak = () => {\n    this.handelPause()\n    let { BreakLength, _ } = this.state\n    let remainingTime = Date.now() + (BreakLength * 60000)\n    remainingTime = new Date(remainingTime)\n    let countDownDate = remainingTime.getTime()\n    // console.log(\"breakkkkkkkkkkkkkkkkkkkkkkkkkkkkk\" + remainingTime.getHours() + \":\" + remainingTime.getMinutes() + \":\" + remainingTime.getSeconds());\n    timeoutID = setInterval(() => {\n\n      // Get today's date and time\n      let now = new Date().getTime()\n\n      // Find the distance between now and the count down date\n      let distance = new Date(countDownDate - now)\n\n      // Time calculations for  hours, minutes and seconds\n      let hours = distance.getHours()\n      let minutes = distance.getMinutes()\n      let seconds = distance.getSeconds()\n      let newremaining = (hours * 3600 * 1000 + minutes * 60000 + seconds * 1000)\n\n      //  Happy Debugging!\n      // let newremainingtime = new Date(hours * 3600 * 1000 + minutes * 60000 + seconds * 1000)\n      // console.log(hours + \":\" + minutes + \":\" + seconds + \"---\" + (minutes * 60000 + seconds * 1000) + \"----\" + newremainingtime.getMinutes() + \":\" + newremainingtime.getSeconds())\n      this.setState({\n        timerLabel: \"Take Break!\",\n        remainingTime: newremaining\n\n\n      })\n      if (minutes == 0 && seconds <= 3)\n        this.audioBeep(\"start\")\n\n      // If the count down is over, rest the timer to intail state 25:00\n      if (seconds == 0) {\n\n        this.audioBeep(\"stop\")\n        this.handelPause()\n        let { sesstionLength, _ } = this.state\n        console.log(\"before\"+sesstionLength);\n        let newSession = sesstionLength * 60000\n        this.setState({\n          timerLabel: \"Session\",\n          sesstionLength: sesstionLength,\n          remainingTime: newSession\n        })\n        console.log(\"after\"+sesstionLength);\n\n      }\n    }, 1000)\n\n\n  }\n\n  /**\n   * When I click the element with the id of reset, any running timer should be stopped,\n   * the value within id=\"break-length\" should return to 5,\n   * the value within id=\"session-length\" should return to 25,\n   * the element with id=\"time-left\" should reset to its default state.\n   */\n  handelReset = () => {\n    clearInterval(timeoutID)\n\n    this.setState({\n      timerLabel: \"Session\",\n      BreakLength: 5,\n      sesstionLength: 25,\n      remainingTime: 1500000\n    })\n  }\n\n  /**converts the remainingTime format ( ss(seconds) to mm:ss (minutes:seconds))*/\n  timeFormat = (time) => {\n    /**\n     *The padStart() method pads the current string with another string (multiple times, if needed)\n     * until the resulting string reaches the given length.\n     * \"1:0\".padStart(2, '0')=>\"01:00\"\n   */\n    let minutes = new Date(time).getMinutes().toString().padStart(2, '0')\n    let seconds = new Date(time).getSeconds().toString().padStart(2, '0')\n    return minutes + \":\" + seconds\n  }\n\n  render() {\n    return (\n      <div id=\"app\">\n        <div className=\"timer-wrapper\">\n          <div id=\"timer-label\">{this.state.timerLabel}</div>\n          <div id=\"time-left\">{this.timeFormat(this.state.remainingTime)}</div>\n        </div>\n        <Controls\n          reset={this.handelReset}\n          start={this.handelTimer}\n          stop={this.handelPause}\n        />\n        <Options\n          changeBreakLength={this.handleBreakLength}\n          changeSesstionLength={this.handleSesstionLength}\n          currentBreakLength={this.state.BreakLength}\n          currentSesstionLength={this.state.sesstionLength}\n        />\n        <audio\n          id=\"beep\"\n          preload=\"auto\"\n\n          src=\"https://raw.githubusercontent.com/freeCodeCamp/cdn/master/build/testable-projects-fcc/audio/BeepSound.wav\"\n        />\n      </div>\n    );\n  }\n}\n\nclass Controls extends React.Component {\n  render() {\n    return (\n      <div id=\"controls\">\n        <button onClick={this.props.start}>Start</button>\n        <button onClick={this.props.stop}>Stop</button>\n        <button onClick={this.props.reset}>Reset</button>\n      </div >\n\n    );\n  }\n}\n\nclass Options extends React.Component {\n  render() {\n    return (\n      <div id=\"options\">\n        <div className=\"length-control\">\n          <div id=\"break-label\">Break Length</div>\n          <button\n            className=\"btn-level\"\n            id=\"break-decrement\"\n            onClick={this.props.changeBreakLength}\n            value=\"-\"\n          >\n            <span className=\"material-icons\">&#xe316;</span>\n\n          </button>\n          <div className=\"btn-level\" id=\"break-length\">\n            {this.props.currentBreakLength}\n          </div>\n          <button\n            className=\"btn-level\"\n            id=\"break-increment\"\n            onClick={this.props.changeBreakLength}\n            value=\"+\"\n          >\n            <span className=\"material-icons\">&#xe313;</span>\n          </button>\n        </div>\n\n        <div className=\"length-control\">\n          <div id=\"session-label\">Session Length</div>\n          <button\n            className=\"btn-level\"\n            id=\"session-decrement\"\n            onClick={this.props.changeSesstionLength}\n            value=\"-\"\n          >\n            <span className=\"material-icons\">&#xe316;</span>\n          </button>\n          <div className=\"btn-level\" id=\"session-length\">\n            {this.props.currentSesstionLength}\n          </div>\n          <button\n            className=\"btn-level\"\n            id=\"session-increment\"\n            onClick={this.props.changeSesstionLength}\n            value=\"+\"\n          >\n            <span className=\"material-icons\">&#xe313;</span>\n\n          </button>\n        </div>\n      </div>\n\n    );\n  }\n\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <Timer />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n"],"sourceRoot":""}